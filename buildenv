#!/bin/sh
#
# Set up environment variables for general build tool to operate
# This buildenv is a sample. It describes the minimal environment
# variables required to set up a port environment.
# Alternate environment configurations of the name setenv_<variant>.sh
# are also available for reading.
# These examples are also used as a testbed for build.sh itself
#
if ! [ -f ./buildenv ]; then
	echo "Need to source from the buildenv directory" >&2
	return 0
fi

#
# The ZOPEN_ROOT must be specified and should be set to "${PWD}"
# The ZOPEN_ROOT _will_ become optional. It currently is required but
# will become optional once build.sh source's the environment directly
#
export ZOPEN_ROOT="${PWD}"

#
# The ZOPEN_TYPE is required. This indicates whether the Open-Source
# package contents are stored in a 'git' format or a 'tarball' format.
# At some point, other formats (perhaps pax) may be supported
# For this example, we are specifying that we will use a zipped tarball format
# for our build.
#
export ZOPEN_TYPE="TARBALL"

#
# Given the ZOPEN_TYPE, build.sh will then need to know where to download from,
# and what other software is required to be able to build this code.
# Since a TARBALL was selected, the environment variables
# ZOPEN_TARBALL_URL and ZOPEN_TARBALL_DEPS are required to be specified.
# The ZOPEN_TARBALL_URL is the fully-qualified location of the tar.gz format of
# tarball, or the tar.xz format of tarball.
# The ZOPEN_TARBALL_DEPS lists each of the ported tools that are required to be
# able to build the code. In the simplest case, this will include:
#  - curl: required to be able to download the tarball
#  - gz or xz: required to be able to unzip the tarball
#  - git: required by build.sh to be able to apply patches
# Many packages will require basic tools like m4, make.
#
export ZOPEN_TARBALL_URL="https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz"
export ZOPEN_TARBALL_DEPS="curl gzip make"

export LDFLAGS="-Wl,edit=no"
export BIGFILES="-D_FILE_OFFSET_BITS=64"
# export CPPFLAGS="-DNSIG=9 -D_XOPEN_SOURCE=600 -D_ALL_SOURCE -D_OPEN_SYS_FILE_EXT=1 -D_AE_BIMODAL=1 -D_ENHANCED_ASCII_EXT=0xFFFFFFFF"
export CFLAGS="-O2 -qascii -q64 -std=gnu11 $(CPPFLAGS) $(BIGFILES) -D_XOPEN_SOURCE_EXTENDED=1"
export CC=xlclang

